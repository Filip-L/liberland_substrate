
//! Autogenerated weights for pallet_liberland_legislation
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-23, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `kacper-HP-ProBook-445-G7`, CPU: `AMD Ryzen 7 4700U with Radeon Graphics`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/substrate
// benchmark
// pallet
// --pallet=pallet_liberland_legislation
// --execution=native
// --steps=20
// --repeat=10
// --output=frame/liberland-legislation/src/weights.rs
// --extrinsic=*
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_liberland_legislation.
pub trait WeightInfo {
	fn add_law(s: u32, ) -> Weight;
	fn repeal_law() -> Weight;
	fn submit_veto() -> Weight;
	fn revert_veto() -> Weight;
	fn trigger_headcount_veto(c: u32, ) -> Weight;
}

/// Weights for pallet_liberland_legislation using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: LiberlandLegislation Laws (r:1 w:1)
	/// Proof Skipped: LiberlandLegislation Laws (max_values: None, max_size: None, mode: Measured)
	/// The range of component `s` is `[1, 65536]`.
	fn add_law(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3541`
		// Minimum execution time: 7_925_000 picoseconds.
		Weight::from_parts(8_439_585, 3541)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(75, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: LiberlandLegislation Laws (r:0 w:1)
	/// Proof Skipped: LiberlandLegislation Laws (max_values: None, max_size: None, mode: Measured)
	fn repeal_law() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_920_000 picoseconds.
		Weight::from_parts(4_969_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Identity IdentityOf (r:1 w:0)
	/// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Vetos (r:1 w:1)
	/// Proof Skipped: LiberlandLegislation Vetos (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiberlandLegislation VetosCount (r:1 w:1)
	/// Proof Skipped: LiberlandLegislation VetosCount (max_values: None, max_size: None, mode: Measured)
	fn submit_veto() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `446`
		//  Estimated: `11003`
		// Minimum execution time: 18_696_000 picoseconds.
		Weight::from_parts(19_086_000, 11003)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: LiberlandLegislation Vetos (r:1 w:1)
	/// Proof Skipped: LiberlandLegislation Vetos (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiberlandLegislation VetosCount (r:1 w:1)
	/// Proof Skipped: LiberlandLegislation VetosCount (max_values: None, max_size: None, mode: Measured)
	fn revert_veto() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `261`
		//  Estimated: `3726`
		// Minimum execution time: 16_231_000 picoseconds.
		Weight::from_parts(17_604_000, 3726)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: LLM Citizens (r:1 w:0)
	/// Proof: LLM Citizens (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Vetos (r:1001 w:1000)
	/// Proof Skipped: LiberlandLegislation Vetos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Identity IdentityOf (r:1000 w:0)
	/// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation VetosCount (r:0 w:1)
	/// Proof Skipped: LiberlandLegislation VetosCount (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiberlandLegislation Laws (r:0 w:1)
	/// Proof Skipped: LiberlandLegislation Laws (max_values: None, max_size: None, mode: Measured)
	/// The range of component `c` is `[16, 1000]`.
	fn trigger_headcount_veto(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `795 + c * (158 ±0)`
		//  Estimated: `4284 + c * (10013 ±0)`
		// Minimum execution time: 154_543_000 picoseconds.
		Weight::from_parts(164_062_000, 4284)
			// Standard Error: 74_769
			.saturating_add(Weight::from_parts(6_940_677, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 10013).saturating_mul(c.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: LiberlandLegislation Laws (r:1 w:1)
	/// Proof Skipped: LiberlandLegislation Laws (max_values: None, max_size: None, mode: Measured)
	/// The range of component `s` is `[1, 65536]`.
	fn add_law(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3541`
		// Minimum execution time: 7_925_000 picoseconds.
		Weight::from_parts(8_439_585, 3541)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(75, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: LiberlandLegislation Laws (r:0 w:1)
	/// Proof Skipped: LiberlandLegislation Laws (max_values: None, max_size: None, mode: Measured)
	fn repeal_law() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_920_000 picoseconds.
		Weight::from_parts(4_969_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Identity IdentityOf (r:1 w:0)
	/// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Vetos (r:1 w:1)
	/// Proof Skipped: LiberlandLegislation Vetos (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiberlandLegislation VetosCount (r:1 w:1)
	/// Proof Skipped: LiberlandLegislation VetosCount (max_values: None, max_size: None, mode: Measured)
	fn submit_veto() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `446`
		//  Estimated: `11003`
		// Minimum execution time: 18_696_000 picoseconds.
		Weight::from_parts(19_086_000, 11003)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: LiberlandLegislation Vetos (r:1 w:1)
	/// Proof Skipped: LiberlandLegislation Vetos (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiberlandLegislation VetosCount (r:1 w:1)
	/// Proof Skipped: LiberlandLegislation VetosCount (max_values: None, max_size: None, mode: Measured)
	fn revert_veto() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `261`
		//  Estimated: `3726`
		// Minimum execution time: 16_231_000 picoseconds.
		Weight::from_parts(17_604_000, 3726)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: LLM Citizens (r:1 w:0)
	/// Proof: LLM Citizens (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Vetos (r:1001 w:1000)
	/// Proof Skipped: LiberlandLegislation Vetos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Identity IdentityOf (r:1000 w:0)
	/// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation VetosCount (r:0 w:1)
	/// Proof Skipped: LiberlandLegislation VetosCount (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiberlandLegislation Laws (r:0 w:1)
	/// Proof Skipped: LiberlandLegislation Laws (max_values: None, max_size: None, mode: Measured)
	/// The range of component `c` is `[16, 1000]`.
	fn trigger_headcount_veto(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `795 + c * (158 ±0)`
		//  Estimated: `4284 + c * (10013 ±0)`
		// Minimum execution time: 154_543_000 picoseconds.
		Weight::from_parts(164_062_000, 4284)
			// Standard Error: 74_769
			.saturating_add(Weight::from_parts(6_940_677, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 10013).saturating_mul(c.into()))
	}
}
