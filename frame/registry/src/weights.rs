
//! Autogenerated weights for pallet_registry
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-23, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `kacper-HP-ProBook-445-G7`, CPU: `AMD Ryzen 7 4700U with Radeon Graphics`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/substrate
// benchmark
// pallet
// --pallet=pallet_registry
// --execution=wasm
// --wasm-execution=compiled
// --steps=20
// --repeat=10
// --output=frame/registry/src/weights.rs
// --extrinsic=*
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_registry.
pub trait WeightInfo {
	fn add_registry(r: u32, ) -> Weight;
	fn request_entity(s: u32, ) -> Weight;
	fn request_registration(s: u32, ) -> Weight;
	fn cancel_request() -> Weight;
	fn unregister(r: u32, ) -> Weight;
	fn register_entity(r: u32, s: u32, ) -> Weight;
	fn set_registered_entity(r: u32, s: u32, ) -> Weight;
}

/// Weights for pallet_registry using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: CompanyRegistry Registrars (r:1 w:1)
	/// Proof: CompanyRegistry Registrars (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 8]`.
	fn add_registry(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + r * (32 ±0)`
		//  Estimated: `1806`
		// Minimum execution time: 18_876_000 picoseconds.
		Weight::from_parts(19_483_330, 1806)
			// Standard Error: 69_679
			.saturating_add(Weight::from_parts(384_797, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: CompanyRegistry NextEntityId (r:1 w:1)
	/// Proof: CompanyRegistry NextEntityId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Requests (r:1 w:1)
	/// Proof: CompanyRegistry Requests (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// Storage: Balances Reserves (r:1 w:1)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry EntityOwner (r:0 w:1)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry OwnerEntities (r:0 w:1)
	/// Proof: CompanyRegistry OwnerEntities (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 8194]`.
	fn request_entity(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `11716`
		// Minimum execution time: 61_807_000 picoseconds.
		Weight::from_parts(64_763_447, 11716)
			// Standard Error: 115
			.saturating_add(Weight::from_parts(412, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: CompanyRegistry EntityOwner (r:1 w:0)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Requests (r:1 w:1)
	/// Proof: CompanyRegistry Requests (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// Storage: Balances Reserves (r:1 w:1)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 8194]`.
	fn request_registration(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `593 + s * (1 ±0)`
		//  Estimated: `11716`
		// Minimum execution time: 84_531_000 picoseconds.
		Weight::from_parts(88_087_918, 11716)
			// Standard Error: 63
			.saturating_add(Weight::from_parts(1_008, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: CompanyRegistry EntityOwner (r:1 w:0)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Requests (r:1 w:1)
	/// Proof: CompanyRegistry Requests (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// Storage: Balances Reserves (r:1 w:1)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn cancel_request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `693`
		//  Estimated: `11716`
		// Minimum execution time: 61_646_000 picoseconds.
		Weight::from_parts(62_619_000, 11716)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: CompanyRegistry Registrars (r:1 w:0)
	/// Proof: CompanyRegistry Registrars (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Registries (r:1 w:1)
	/// Proof: CompanyRegistry Registries (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry EntityOwner (r:1 w:0)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Balances Reserves (r:1 w:1)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 8]`.
	fn unregister(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `712 + r * (32 ±0)`
		//  Estimated: `11716`
		// Minimum execution time: 60_505_000 picoseconds.
		Weight::from_parts(63_352_987, 11716)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: CompanyRegistry Registrars (r:1 w:0)
	/// Proof: CompanyRegistry Registrars (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Requests (r:1 w:1)
	/// Proof: CompanyRegistry Requests (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry EntityOwner (r:1 w:0)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Registries (r:1 w:1)
	/// Proof: CompanyRegistry Registries (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `s` is `[2, 8194]`.
	fn register_entity(r: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `451 + r * (32 ±0) + s * (1 ±0)`
		//  Estimated: `11716`
		// Minimum execution time: 37_541_000 picoseconds.
		Weight::from_parts(39_476_882, 11716)
			// Standard Error: 19_642
			.saturating_add(Weight::from_parts(11_047, 0).saturating_mul(r.into()))
			// Standard Error: 17
			.saturating_add(Weight::from_parts(1_753, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: CompanyRegistry Registrars (r:1 w:0)
	/// Proof: CompanyRegistry Registrars (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Registries (r:1 w:1)
	/// Proof: CompanyRegistry Registries (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `s` is `[2, 8194]`.
	fn set_registered_entity(r: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `406 + r * (32 ±0) + s * (1 ±0)`
		//  Estimated: `11716`
		// Minimum execution time: 26_109_000 picoseconds.
		Weight::from_parts(27_675_938, 11716)
			// Standard Error: 13_707
			.saturating_add(Weight::from_parts(6_976, 0).saturating_mul(r.into()))
			// Standard Error: 12
			.saturating_add(Weight::from_parts(1_074, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: CompanyRegistry Registrars (r:1 w:1)
	/// Proof: CompanyRegistry Registrars (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 8]`.
	fn add_registry(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + r * (32 ±0)`
		//  Estimated: `1806`
		// Minimum execution time: 18_876_000 picoseconds.
		Weight::from_parts(19_483_330, 1806)
			// Standard Error: 69_679
			.saturating_add(Weight::from_parts(384_797, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: CompanyRegistry NextEntityId (r:1 w:1)
	/// Proof: CompanyRegistry NextEntityId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Requests (r:1 w:1)
	/// Proof: CompanyRegistry Requests (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// Storage: Balances Reserves (r:1 w:1)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry EntityOwner (r:0 w:1)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry OwnerEntities (r:0 w:1)
	/// Proof: CompanyRegistry OwnerEntities (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 8194]`.
	fn request_entity(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `11716`
		// Minimum execution time: 61_807_000 picoseconds.
		Weight::from_parts(64_763_447, 11716)
			// Standard Error: 115
			.saturating_add(Weight::from_parts(412, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: CompanyRegistry EntityOwner (r:1 w:0)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Requests (r:1 w:1)
	/// Proof: CompanyRegistry Requests (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// Storage: Balances Reserves (r:1 w:1)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 8194]`.
	fn request_registration(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `593 + s * (1 ±0)`
		//  Estimated: `11716`
		// Minimum execution time: 84_531_000 picoseconds.
		Weight::from_parts(88_087_918, 11716)
			// Standard Error: 63
			.saturating_add(Weight::from_parts(1_008, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: CompanyRegistry EntityOwner (r:1 w:0)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Requests (r:1 w:1)
	/// Proof: CompanyRegistry Requests (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// Storage: Balances Reserves (r:1 w:1)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn cancel_request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `693`
		//  Estimated: `11716`
		// Minimum execution time: 61_646_000 picoseconds.
		Weight::from_parts(62_619_000, 11716)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: CompanyRegistry Registrars (r:1 w:0)
	/// Proof: CompanyRegistry Registrars (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Registries (r:1 w:1)
	/// Proof: CompanyRegistry Registries (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry EntityOwner (r:1 w:0)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Balances Reserves (r:1 w:1)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 8]`.
	fn unregister(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `712 + r * (32 ±0)`
		//  Estimated: `11716`
		// Minimum execution time: 60_505_000 picoseconds.
		Weight::from_parts(63_352_987, 11716)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: CompanyRegistry Registrars (r:1 w:0)
	/// Proof: CompanyRegistry Registrars (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Requests (r:1 w:1)
	/// Proof: CompanyRegistry Requests (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry EntityOwner (r:1 w:0)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Registries (r:1 w:1)
	/// Proof: CompanyRegistry Registries (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `s` is `[2, 8194]`.
	fn register_entity(r: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `451 + r * (32 ±0) + s * (1 ±0)`
		//  Estimated: `11716`
		// Minimum execution time: 37_541_000 picoseconds.
		Weight::from_parts(39_476_882, 11716)
			// Standard Error: 19_642
			.saturating_add(Weight::from_parts(11_047, 0).saturating_mul(r.into()))
			// Standard Error: 17
			.saturating_add(Weight::from_parts(1_753, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: CompanyRegistry Registrars (r:1 w:0)
	/// Proof: CompanyRegistry Registrars (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Registries (r:1 w:1)
	/// Proof: CompanyRegistry Registries (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `s` is `[2, 8194]`.
	fn set_registered_entity(r: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `406 + r * (32 ±0) + s * (1 ±0)`
		//  Estimated: `11716`
		// Minimum execution time: 26_109_000 picoseconds.
		Weight::from_parts(27_675_938, 11716)
			// Standard Error: 13_707
			.saturating_add(Weight::from_parts(6_976, 0).saturating_mul(r.into()))
			// Standard Error: 12
			.saturating_add(Weight::from_parts(1_074, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
