
//! Autogenerated weights for pallet_registry
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-28, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `kacper-HP-ProBook-445-G7`, CPU: `AMD Ryzen 7 4700U with Radeon Graphics`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/substrate
// benchmark
// pallet
// --pallet=pallet_registry
// --steps=20
// --repeat=10
// --output=frame/registry/src/weights.rs
// --extrinsic=*
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_registry.
pub trait WeightInfo {
	fn add_registry(r: u32, ) -> Weight;
	fn request_registration(s: u32, ) -> Weight;
	fn cancel_request() -> Weight;
	fn unregister(r: u32, ) -> Weight;
	fn register_entity(r: u32, s: u32, ) -> Weight;
	fn set_registered_entity(r: u32, s: u32, ) -> Weight;
}

/// Weights for pallet_registry using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: CompanyRegistry Registrars (r:1 w:1)
	/// The range of component `r` is `[1, 9]`.
	fn add_registry(r: u32, ) -> Weight {
		// Minimum execution time: 17_383 nanoseconds.
		Weight::from_ref_time(17_638_245)
			// Standard Error: 4_309
			.saturating_add(Weight::from_ref_time(73_910).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: CompanyRegistry Requests (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `s` is `[2, 1026]`.
	fn request_registration(s: u32, ) -> Weight {
		// Minimum execution time: 21_491 nanoseconds.
		Weight::from_ref_time(33_708_803)
			// Standard Error: 877
			.saturating_add(Weight::from_ref_time(3_455).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: CompanyRegistry Requests (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn cancel_request() -> Weight {
		// Minimum execution time: 35_066 nanoseconds.
		Weight::from_ref_time(35_126_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: CompanyRegistry Registrars (r:1 w:0)
	// Storage: CompanyRegistry Registries (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `r` is `[1, 10]`.
	fn unregister(_r: u32, ) -> Weight {
		// Minimum execution time: 36_038 nanoseconds.
		Weight::from_ref_time(36_893_939)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: CompanyRegistry Registrars (r:1 w:0)
	// Storage: CompanyRegistry Requests (r:1 w:1)
	// Storage: CompanyRegistry Registries (r:1 w:1)
	/// The range of component `r` is `[1, 10]`.
	/// The range of component `s` is `[2, 1026]`.
	fn register_entity(r: u32, s: u32, ) -> Weight {
		// Minimum execution time: 25_358 nanoseconds.
		Weight::from_ref_time(25_744_293)
			// Standard Error: 9_675
			.saturating_add(Weight::from_ref_time(18_608).saturating_mul(r.into()))
			// Standard Error: 88
			.saturating_add(Weight::from_ref_time(1_878).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: CompanyRegistry Registrars (r:1 w:0)
	// Storage: CompanyRegistry Registries (r:1 w:1)
	/// The range of component `r` is `[1, 10]`.
	/// The range of component `s` is `[2, 1026]`.
	fn set_registered_entity(r: u32, s: u32, ) -> Weight {
		// Minimum execution time: 22_723 nanoseconds.
		Weight::from_ref_time(23_344_246)
			// Standard Error: 8_352
			.saturating_add(Weight::from_ref_time(1_263).saturating_mul(r.into()))
			// Standard Error: 76
			.saturating_add(Weight::from_ref_time(737).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: CompanyRegistry Registrars (r:1 w:1)
	/// The range of component `r` is `[1, 9]`.
	fn add_registry(r: u32, ) -> Weight {
		// Minimum execution time: 17_383 nanoseconds.
		Weight::from_ref_time(17_638_245)
			// Standard Error: 4_309
			.saturating_add(Weight::from_ref_time(73_910).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: CompanyRegistry Requests (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `s` is `[2, 1026]`.
	fn request_registration(s: u32, ) -> Weight {
		// Minimum execution time: 21_491 nanoseconds.
		Weight::from_ref_time(33_708_803)
			// Standard Error: 877
			.saturating_add(Weight::from_ref_time(3_455).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: CompanyRegistry Requests (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn cancel_request() -> Weight {
		// Minimum execution time: 35_066 nanoseconds.
		Weight::from_ref_time(35_126_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: CompanyRegistry Registrars (r:1 w:0)
	// Storage: CompanyRegistry Registries (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `r` is `[1, 10]`.
	fn unregister(_r: u32, ) -> Weight {
		// Minimum execution time: 36_038 nanoseconds.
		Weight::from_ref_time(36_893_939)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: CompanyRegistry Registrars (r:1 w:0)
	// Storage: CompanyRegistry Requests (r:1 w:1)
	// Storage: CompanyRegistry Registries (r:1 w:1)
	/// The range of component `r` is `[1, 10]`.
	/// The range of component `s` is `[2, 1026]`.
	fn register_entity(r: u32, s: u32, ) -> Weight {
		// Minimum execution time: 25_358 nanoseconds.
		Weight::from_ref_time(25_744_293)
			// Standard Error: 9_675
			.saturating_add(Weight::from_ref_time(18_608).saturating_mul(r.into()))
			// Standard Error: 88
			.saturating_add(Weight::from_ref_time(1_878).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: CompanyRegistry Registrars (r:1 w:0)
	// Storage: CompanyRegistry Registries (r:1 w:1)
	/// The range of component `r` is `[1, 10]`.
	/// The range of component `s` is `[2, 1026]`.
	fn set_registered_entity(r: u32, s: u32, ) -> Weight {
		// Minimum execution time: 22_723 nanoseconds.
		Weight::from_ref_time(23_344_246)
			// Standard Error: 8_352
			.saturating_add(Weight::from_ref_time(1_263).saturating_mul(r.into()))
			// Standard Error: 76
			.saturating_add(Weight::from_ref_time(737).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
